{"version":3,"sources":["components/cards/cards.module.css","App.module.css","components/cards/cards.jsx","api/index.js","components/charts/charts.jsx","components/countryPicker/countryPicker.jsx","components/statePicker/statePicker.jsx","App.js","serviceWorker.js","index.js","images/Coronavirus.gif","components/charts/charts.module.css","components/countryPicker/countryPicker.module.css","images/covid-19.jpg","images/heart.jpg","components/statePicker/statePicker.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","active","lastUpdate","stateName","mdLength","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchStateWiseData","a","axios","get","fetchData","country","fetchUrl","stateData","detail","fetchDailyData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Charts","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","getLabels","background","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchCountries","fetchApi","FormControl","formControl","console","log","NativeSelect","onChange","e","target","i","key","StatePicker","handleStateChange","state","App","displayData","loading","setState","fethedData","find","sData","provinceState","dData","getStateOptions","this","style","appbar","image","src","covidImage","alt","gif","covidGif","loader","marginLeft","footer","heartImage","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b015650c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"cards_container__OJNLu\",\"card\":\"cards_card__hdGL3\",\"infected\":\"cards_infected__3ItNI\",\"recovered\":\"cards_recovered__1Dbbj\",\"deaths\":\"cards_deaths__dgLOJ\",\"active\":\"cards_active__1tc6r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__346T7\",\"appbar\":\"App_appbar__3ret_\",\"image\":\"App_image__1XGvd\",\"gif\":\"App_gif__1HBf0\",\"heartImage\":\"App_heartImage__3g9v3\",\"loader\":\"App_loader__G8sgr\",\"footer\":\"App_footer__2WNC-\"};","import React from \"react\";\r\nimport {Card, CardContent, Typography, Grid} from '@material-ui/core'\r\nimport cx from 'classnames';\r\nimport styles from './cards.module.css'\r\nimport CountUp from 'react-countup'\r\n\r\nconst Cards = ({data: {confirmed, recovered, deaths, active, lastUpdate}, stateName}) => {\r\n    if (!confirmed) {\r\n        return \"Loading...\";\r\n    }\r\n    const mdLength = stateName ? 2:3;\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify='center'>\r\n                <Grid item component={Card} xs={12} md={mdLength} className={cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={confirmed.value} duration=\"2.5\" separator=\",\"/>\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of active cases of COVID-19</Typography>\r\n                    </CardContent>\r\n\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={mdLength} className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n                        <Typography variant=\"h5\"> <CountUp start={0} end={recovered.value} duration=\"2.5\"\r\n                                                           separator=\",\"/></Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of recoveries from COVID-19</Typography>\r\n                    </CardContent>\r\n\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={mdLength} className={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                        <Typography variant=\"h5\"><CountUp start={0} end={deaths.value} duration=\"2.5\"\r\n                                                          separator=\",\"/></Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of deaths caused by COVID-19</Typography>\r\n                    </CardContent>\r\n\r\n                </Grid>\r\n                {stateName && <Grid item component={Card} xs={12} md={mdLength} className={cx(styles.card, styles.active)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Active</Typography>\r\n                        <Typography variant=\"h5\"><CountUp start={0} end={active.value} duration=\"2.5\"\r\n                                                          separator=\",\"/></Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of active cases caused by COVID-19</Typography>\r\n                    </CardContent>\r\n\r\n                </Grid>}\r\n            </Grid>\r\n\r\n        </div>\r\n    )\r\n};\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\n\r\nasync function fetchStateWiseData(url){\r\n    return await axios.get(url);\r\n    // return {provinceState,countryRegion,confirmed,recovered,deaths,active,combinedKey}\r\n};\r\n\r\nexport const fetchData = async (country) => {\r\n    let fetchUrl=url;\r\n    if(country){\r\n        fetchUrl=`${url}/countries/${country}`;\r\n    }\r\n    try {\r\n        const {data: {confirmed, recovered, deaths, lastUpdate}} = await axios.get(fetchUrl);\r\n        let stateData = [];\r\n        if(country){\r\n            stateData= await fetchStateWiseData(recovered.detail);\r\n        }\r\n        return {confirmed, recovered, deaths, lastUpdate, stateData: stateData.data}\r\n    }\r\n    catch (error) {\r\n\r\n    }\r\n\r\n};\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const {data} = await axios.get(`${url}/daily`);\r\n        return data.map((dailyData)=>({\r\n         confirmed:dailyData.confirmed.total,\r\n         deaths:dailyData.deaths.total,\r\n         date:dailyData.reportDate\r\n     }));\r\n    }\r\n    catch (error) {\r\n\r\n    }\r\n\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n    try {\r\n        const {data:{countries}} = await axios.get(`${url}/countries`);\r\n        return countries.map((country)=>country.name);\r\n    }\r\n    catch (error) {\r\n\r\n    }\r\n\r\n};\r\nexport const fetchCountriesForNews = async () => {\r\n    try {\r\n        const {data} = await axios.get(`https://restcountries.eu/rest/v2/region/asia`);\r\n        return data.map((country)=>{\r\n            return{\r\n                name:country.name,alpha2Code:country.alpha2Code,languages:country.languages,flag:country.flag\r\n            };\r\n        });\r\n    }\r\n    catch (error) {\r\n\r\n    }\r\n\r\n};\r\n\r\n","import React,{useState,useEffect} from \"react\";\r\nimport {fetchDailyData} from '../../api';\r\nimport {Line,Bar} from 'react-chartjs-2'\r\nimport styles from './charts.module.css'\r\n\r\nconst Charts=({data:{confirmed,recovered,deaths, active},country, stateName})=>{\r\n    let [dailyData, setDailyData] = useState([]);\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setDailyData(await fetchDailyData());\r\n        };\r\n        fetchAPI();\r\n    },[]);\r\n    const lineChart = (\r\n        dailyData.length ? (\r\n            <Line data={{\r\n            labels: dailyData.map(({date})=>date),\r\n            datasets: [{\r\n                data: dailyData.map(({confirmed})=>confirmed),\r\n                label:'Infected',\r\n                borderColor:'#3333ff',\r\n                fill:true\r\n            },\r\n                {\r\n                    data: dailyData.map(({deaths})=>deaths),\r\n                    label:'Deaths',\r\n                    borderColor:'red',\r\n                    backgroundColor:'rgba(255,0,0,0.5)',\r\n                    fill:true\r\n                }]\r\n        }}/>) : null\r\n    );\r\n    const getLabels = ()=> {\r\n        if(stateName){\r\n            return {\r\n                label : ['Infected','Recovered','Deaths', 'Active'],\r\n                background: ['rgba(0,0,255,0.5)','rgba(0,255,0,0.5)','rgba(255,0,0,0.5)', 'yellow'],\r\n                data: [confirmed.value,recovered.value,deaths.value, active.value]\r\n            }\r\n        }\r\n        return {\r\n            label : ['Infected','Recovered','Deaths'],\r\n            background: ['rgba(0,0,255,0.5)','rgba(0,255,0,0.5)','rgba(255,0,0,0.5)'],\r\n            data: [confirmed.value,recovered.value,deaths.value]\r\n        };\r\n\r\n    }\r\n    const barChart = (\r\n        confirmed ? (\r\n            <Bar data={{labels: getLabels().label ,\r\n                datasets: [{\r\n                    label:'People',\r\n                    backgroundColor: getLabels().background,\r\n                    data: getLabels().data\r\n                }]\r\n\r\n            }}\r\n            options={{\r\n                legend:{display:false},\r\n                title:{display:true,text:`Current state in ${country} ${stateName ? `-> ${stateName}` : ''}`}\r\n            }}/>) : null\r\n    );\r\n    return (\r\n       <div className={styles.container}>\r\n           {country?barChart:lineChart}\r\n       </div>\r\n    )\r\n};\r\nexport default Charts;","import React,{useState,useEffect} from \"react\";\r\nimport {NativeSelect,FormControl} from '@material-ui/core';\r\nimport styles from './countryPicker.module.css';\r\nimport {fetchCountries} from '../../api';\r\n\r\n\r\nconst CountryPicker=({value,handleCountryChange})=>{\r\n    let [fetchedCountries, setFetchCountries] = useState([]);\r\n    useEffect(() => {\r\n        const fetchApi = async () => {\r\n            setFetchCountries(await fetchCountries());\r\n        };\r\n        fetchApi();\r\n    },[]);\r\n    return (\r\n\r\n       <FormControl className={styles.formControl}>\r\n           {console.log(value)}\r\n           <NativeSelect value={value} onChange={(e)=>handleCountryChange(e.target.value)}>\r\n               <option value=\"\">Global</option>\r\n               {fetchedCountries.map((country,i)=><option key={i} value={country}>{country}</option>)}\r\n           </NativeSelect>\r\n       </FormControl>\r\n    )\r\n};\r\nexport default CountryPicker;","import React from \"react\";\r\nimport {FormControl, NativeSelect} from \"@material-ui/core\";\r\nimport styles from \"./statePicker.module.css\";\r\n\r\n\r\nconst StatePicker=({value, options, handleStateChange})=>{\r\n    console.log('options', options);\r\n    return (\r\n       <FormControl className={styles.formControl}>\r\n           <NativeSelect value={value} onChange={(e)=>handleStateChange(e.target.value)}>\r\n               <option value=''>Select State</option>\r\n               {options && options.map((state,i)=><option key={i} value={state}>{state}</option>)}\r\n           </NativeSelect>\r\n       </FormControl>\r\n    )\r\n};\r\nexport default StatePicker;","import React from 'react';\nimport {Cards, Charts, CountryPicker} from './components'\nimport styles from './App.module.css'\nimport {fetchData} from './api'\nimport covidImage from './images/covid-19.jpg'\nimport heartImage from './images/heart.jpg'\nimport covidGif from './images/Coronavirus.gif'\nimport StatePicker from \"./components/statePicker/statePicker\";\n\n\nclass App extends React.Component {\n\n    state = {\n        displayData: {},\n        data: {},\n        country: '',\n        stateName: '',\n        loading: false\n    };\n\n    async componentDidMount() {\n        this.setState({loading: true});\n        const fethedData = await fetchData();\n        console.log(fethedData);\n        this.setState({data: fethedData, displayData: fethedData, loading: false});\n    }\n\n    handleCountryChange = async (country) => {\n        this.setState({loading: true});\n        const fethedData = await fetchData(country);\n        console.log('country with state data', fethedData);\n        this.setState({data: fethedData, displayData: fethedData, country, stateName: '', loading: false});\n    }\n    handleStateChange = (state) => {\n        this.setState({loading: true});\n        const data = this.state.data.stateData.find((sData) => {\n            return sData.provinceState === state;\n        });\n        if (data) {\n            const dData = {\n                confirmed: {\n                    value: data.confirmed\n                },\n                recovered: {\n                    value: data.recovered\n                },\n                deaths: {\n                    value: data.deaths\n                },\n                active: {\n                    value: data.active\n                },\n                lastUpdate: data.lastUpdate\n            };\n            this.setState({\n                displayData: dData,\n                stateName: state,\n                loading: false\n            })\n        } else {\n            this.setState({\n                displayData: this.state.data,\n                stateName: '',\n                loading: false\n            })\n        }\n    };\n\n    getStateOptions = () => {\n        return this.state.data.stateData.map((state) => {\n            return state.provinceState;\n        })\n    };\n\n    render() {\n        const {displayData,data, country, stateName, loading} = this.state;\n        return (\n        <div>\n            <div style={{display:'flex'}}>\n                <div className={styles.appbar}>\n                    <img className={styles.image} src={covidImage} alt=\"imdage\"/>\n                </div>\n                <img className={styles.gif}   src={covidGif} alt=\"loading...\"/></div>\n\n\n            <div className={styles.container}>\n\n                {loading? <div className={styles.loader}><img src={covidGif} alt=\"loading...\"/></div>:\n                    <div className={styles.container}>\n                    <Cards data={displayData} stateName={stateName}/>\n                    <div style={{display: 'flex'}}>\n                        <CountryPicker value={country} handleCountryChange={this.handleCountryChange}/>\n                        {country && data && data.stateData.length > 1 &&\n                        <div style={{marginLeft: 20}}><StatePicker value={stateName} options={this.getStateOptions()}\n                                                                   handleStateChange={this.handleStateChange}/></div>}\n                    </div>\n                    <Charts data={displayData} country={country} stateName={stateName}/></div>}\n                <div className={styles.footer}>Last Updated {new Date(displayData?displayData.lastUpdate:'').toDateString()} by <img\n                    className={styles.heartImage} src={heartImage} alt=\"heart\"/> @ Ashish Kumar\n                </div>\n            </div>\n        </div>\n\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/Coronavirus.485a55b2.gif\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"charts_container__21kEy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fromControl\":\"countryPicker_fromControl__fkDEX\"};","module.exports = __webpack_public_path__ + \"static/media/covid-19.b8480713.jpg\";","module.exports = __webpack_public_path__ + \"static/media/heart.fcd5c192.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fromControl\":\"statePicker_fromControl__2Qfy8\"};"],"sourceRoot":""}